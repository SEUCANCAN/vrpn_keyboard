// Generated by gencpp from file vrpn_client_ros/Position_Yaw.msg
// DO NOT EDIT!


#ifndef VRPN_CLIENT_ROS_MESSAGE_POSITION_YAW_H
#define VRPN_CLIENT_ROS_MESSAGE_POSITION_YAW_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace vrpn_client_ros
{
template <class ContainerAllocator>
struct Position_Yaw_
{
  typedef Position_Yaw_<ContainerAllocator> Type;

  Position_Yaw_()
    : Position_x(0.0)
    , Position_y(0.0)
    , Yaw(0.0)
    , Speed_v_ms(0.0)  {
    }
  Position_Yaw_(const ContainerAllocator& _alloc)
    : Position_x(0.0)
    , Position_y(0.0)
    , Yaw(0.0)
    , Speed_v_ms(0.0)  {
  (void)_alloc;
    }



   typedef float _Position_x_type;
  _Position_x_type Position_x;

   typedef float _Position_y_type;
  _Position_y_type Position_y;

   typedef float _Yaw_type;
  _Yaw_type Yaw;

   typedef float _Speed_v_ms_type;
  _Speed_v_ms_type Speed_v_ms;





  typedef boost::shared_ptr< ::vrpn_client_ros::Position_Yaw_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::vrpn_client_ros::Position_Yaw_<ContainerAllocator> const> ConstPtr;

}; // struct Position_Yaw_

typedef ::vrpn_client_ros::Position_Yaw_<std::allocator<void> > Position_Yaw;

typedef boost::shared_ptr< ::vrpn_client_ros::Position_Yaw > Position_YawPtr;
typedef boost::shared_ptr< ::vrpn_client_ros::Position_Yaw const> Position_YawConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::vrpn_client_ros::Position_Yaw_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::vrpn_client_ros::Position_Yaw_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace vrpn_client_ros

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'vrpn_client_ros': ['/home/seu/vrpn/catkin_ws/src/vrpn_client_ros/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::vrpn_client_ros::Position_Yaw_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::vrpn_client_ros::Position_Yaw_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::vrpn_client_ros::Position_Yaw_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::vrpn_client_ros::Position_Yaw_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::vrpn_client_ros::Position_Yaw_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::vrpn_client_ros::Position_Yaw_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::vrpn_client_ros::Position_Yaw_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d6985a552da7cb642a5610ccf637ea1f";
  }

  static const char* value(const ::vrpn_client_ros::Position_Yaw_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd6985a552da7cb64ULL;
  static const uint64_t static_value2 = 0x2a5610ccf637ea1fULL;
};

template<class ContainerAllocator>
struct DataType< ::vrpn_client_ros::Position_Yaw_<ContainerAllocator> >
{
  static const char* value()
  {
    return "vrpn_client_ros/Position_Yaw";
  }

  static const char* value(const ::vrpn_client_ros::Position_Yaw_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::vrpn_client_ros::Position_Yaw_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 Position_x\n\
float32 Position_y\n\
float32 Yaw\n\
float32 Speed_v_ms\n\
\n\
\n\
";
  }

  static const char* value(const ::vrpn_client_ros::Position_Yaw_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::vrpn_client_ros::Position_Yaw_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.Position_x);
      stream.next(m.Position_y);
      stream.next(m.Yaw);
      stream.next(m.Speed_v_ms);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Position_Yaw_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::vrpn_client_ros::Position_Yaw_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::vrpn_client_ros::Position_Yaw_<ContainerAllocator>& v)
  {
    s << indent << "Position_x: ";
    Printer<float>::stream(s, indent + "  ", v.Position_x);
    s << indent << "Position_y: ";
    Printer<float>::stream(s, indent + "  ", v.Position_y);
    s << indent << "Yaw: ";
    Printer<float>::stream(s, indent + "  ", v.Yaw);
    s << indent << "Speed_v_ms: ";
    Printer<float>::stream(s, indent + "  ", v.Speed_v_ms);
  }
};

} // namespace message_operations
} // namespace ros

#endif // VRPN_CLIENT_ROS_MESSAGE_POSITION_YAW_H
